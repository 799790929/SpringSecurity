<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://java.sun.com/xml/ns/j2ee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="2.4"
		 xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd">
  
	<!-- session超时定义,单位为分钟 -->
	<session-config>
		<session-timeout>10</session-timeout>
	</session-config>
	
	<!-- 默认首页定义 -->
	<welcome-file-list>
		<welcome-file>index.jsp</welcome-file>
		<welcome-file>index.html</welcome-file>
	</welcome-file-list>
	
	<!-- Error Page定义 -->
	<error-page>
		<error-code>500</error-code>
		<location>/commons/error.jsp</location>
	</error-page>
	<error-page>
		<error-code>404</error-code>
		<location>/commons/404.jsp</location>
	</error-page>
	<error-page>
		<error-code>403</error-code>
		<location>/commons/403.jsp</location>
	</error-page>
			 
	<!-- Spring ApplicationContext配置文件的路径�,可使用通配符，多个路径用�1,号分隔
	  此参数用于后面的Spring-Context loader -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath*:spring/*.xml</param-value>
	</context-param>
	
	<!-- JSTL i18n定义-->
	<context-param>
		<param-name>javax.servlet.jsp.jstl.fmt.localizationContext</param-name>
		<param-value>i18n/messages</param-value>
	</context-param>
	
	<!-- Character Encoding filter -->
	<filter>
		<filter-name>CharacterEncodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
		<init-param>
			<param-name>forceEncoding</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>

	<!-- LoggerMDCFilter,存放在MDC中的数据，log4j可以直接引用并作为日志信息打印出来. -->
	<filter>
		<filter-name>LoggerMDCFilter</filter-name>
		<filter-class>com.byron.ss.common.filter.LoggerMDCFilter</filter-class>
	</filter>
			
	<filter-mapping>
		<filter-name>CharacterEncodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<filter-mapping>
		<filter-name>LoggerMDCFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	
	<!--Spring ApplicationContext 载入 -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	 <!-- 这个监听器会在 session 创建和销毁的时候通知 Spring Security。 -->
	<listener>
	   <listener-class>org.springframework.security.web.session.HttpSessionEventPublisher</listener-class>  
	</listener>

	<!-- 使Spring支持request与session的scope,如:<bean id="loginAction" class="com.foo.LoginAction" scope="request"/> -->
	<listener>
	  <listener-class>org.springframework.web.context.request.RequestContextListener</listener-class>
	</listener>

	<!-- Spring 刷新Introspector防止内存泄露 -->
	<listener>
		<listener-class>org.springframework.web.util.IntrospectorCleanupListener</listener-class>
	</listener>
	
	<!--Hibernate Open Session in View Filter-->
	<!-- 
	<filter>
		<filter-name>openSessionInViewFilter</filter-name>
		<filter-class>org.springframework.orm.hibernate3.support.OpenSessionInViewFilter</filter-class>
	</filter>
	
	<filter-mapping>
		<filter-name>openSessionInViewFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	 -->
	 <!-- cas单点登录 -->
	 <!-- <listener>
	 <listener-class>org.jasig.cas.client.session.SingleSignOutHttpSessionListener</listener-class>
	 </listener>
	 <filter>
	 	<filter-name>CAS Single Sign Out Filter</filter-name>
	 	<filter-class>org.jasig.cas.client.session.SingleSignOutFilter</filter-class>
	 </filter> 
	 <filter-mapping>
	  	<filter-name>CAS Single Sign Out Filter</filter-name>
	  	<url-pattern>/*</url-pattern>
	  </filter-mapping> -->
	 <!-- Spring FilterChain(security) -->
	  <filter>
	    <filter-name>springSecurityFilterChain</filter-name>
	    <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
	  </filter>
	  <filter-mapping>
	    <filter-name>springSecurityFilterChain</filter-name>
	    <url-pattern>/*</url-pattern>
	  </filter-mapping>
	 
	<filter>
		<filter-name>struts2-cleanup</filter-name>
		<filter-class>org.apache.struts2.dispatcher.ActionContextCleanUp</filter-class>
	</filter>
	<filter>
	      <filter-name>struts2Filter</filter-name>
	      <filter-class>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter</filter-class>
	</filter>
    
    <filter-mapping>
        <filter-name>struts2-cleanup</filter-name>
        <url-pattern>*.do</url-pattern>
    </filter-mapping>		
    <filter-mapping>
        <filter-name>struts2Filter</filter-name>
        <url-pattern>*.do</url-pattern>
    </filter-mapping>    
    <filter-mapping>
	<filter-name>struts2Filter</filter-name>
    <url-pattern>*.jsp</url-pattern>
    <dispatcher>REQUEST</dispatcher>
    <dispatcher>FORWARD</dispatcher> 
 </filter-mapping>
 <filter-mapping>
	 <filter-name>struts2Filter</filter-name>
     <url-pattern>*.action</url-pattern>
     <dispatcher>REQUEST</dispatcher>
     <dispatcher>FORWARD</dispatcher> 
 </filter-mapping>
 
   <jsp-config>
	  <taglib>   
	    <taglib-uri>/ss</taglib-uri>   
	    <taglib-location>/WEB-INF/ss.tld</taglib-location>   
	  </taglib>
  </jsp-config>
 
</web-app>
